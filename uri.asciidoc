= Dart Cookbook
:author: Shailen Tuli
:encoding: UTF-8

== URIs

Note: all examples require that you load 'dart:uri':

--------------------------------------------------------------------------------
import 'dart:uri';
--------------------------------------------------------------------------------


=== Encoding and Decoding Fully Qualified URIs


Use `encodeUri()` to encode a fully qualified URI:

--------------------------------------------------------------------------------
encodeURI('http://www.example.com/file with spaces.html')
// 'http://www.example.com/file+with+spaces.html'
--------------------------------------------------------------------------------

Characters that have special meaning in the URI (such as #;,/?:@&=$) are not
escaped:

--------------------------------------------------------------------------------
encodeUri('http://example.com/?x=10&y=20#last');
// 'http://example.com/?x=10&y=20#last'

encodeUri('mailto:bob@example.com'); // 'mailto:bob@example.com'
--------------------------------------------------------------------------------

Call `encodeUriComponent()` to encode any user-provided parameters that are
passed to the server as part of a URI:

--------------------------------------------------------------------------------
var params = encodeUriComponent('?param1=10&param2=20');
print(params); // '%3Fparam1%3D10%26param2%3D20'

encodeUri('http://www.example.com/') + params;
// 'http://www.example.com/%3Fparam1%3D10%26param2%3D20'));
--------------------------------------------------------------------------------
      
Don't call `encodeUriComponent()` on the complete URI. It escapes characters
like : and / and renders the URI unusable:

--------------------------------------------------------------------------------
encodeUriComponent('http://www.example.com/'); 
// 'http%3A%2F%2Fwww.example.com%2F'
--------------------------------------------------------------------------------

To decode a URI previously encoded using `encodeUri()`, use `decodeUri()`:

--------------------------------------------------------------------------------
var uri = 'http://www.example.com/file with spaces.html';
var encodedUri = encodeUri(uri);
decodeUri(encodedUri) == uri; // true
--------------------------------------------------------------------------------

To decode a URI component previously encoded using `encodeUriComponent()`, use
`decodeUriComponent()`: 

--------------------------------------------------------------------------------
var params = encodeUriComponent('?param1=10&param2=20');
var encodedParams = encodeUriComponent(params);
decodeUriComponent(encodedParams) == params; // true
--------------------------------------------------------------------------------


=== Parsing URIs

==== Problem

You want to access the parts of a URI.

==== Solution

The properties of a URI created using the `Uri()` constructor can be directly
accessed in the following manner: 

--------------------------------------------------------------------------------
var uri = new Uri('http://example.org:8080/content/a.html#intro');

uri.scheme;     // 'http'
uri.userInfo;   // ''
uri.port        // ''
uri.domain;     // 'example.org'
uri.path;       // '/content/a.html'
uri.fragment;   // 'intro'
--------------------------------------------------------------------------------

Get the query parameters using the URI's `query` property:

--------------------------------------------------------------------------------
var params = 'name=john&age=32';
var uri = new Uri('http://example.org/?name=john&age=32');
uri.query; // 'name=john&age=32'
--------------------------------------------------------------------------------

For http/https schemes, you can access the `origin` property:

--------------------------------------------------------------------------------
var uri = new Uri('http://example.org:8080/content/a.html#intro');
uri.origin;     // 'http://example.org:8080'
--------------------------------------------------------------------------------

==== Discussion

The Uri class treats all URs that do not explicitly begin with a scheme as
relative:

--------------------------------------------------------------------------------
new Uri('//example.org:8080/content/').isAbsolute; // false
new Uri('example.org:8080/content/').isAbsolute;   // false
--------------------------------------------------------------------------------

URIs that begin with a scheme, but that contain a fragment, are also considered
relative:

--------------------------------------------------------------------------------
new Uri('http//example.org:8080/content/#intro').isAbsolute; // false
--------------------------------------------------------------------------------
    
The `scheme` and `domain` properties for  relative URIs are empty. Instead, a 
relative URI starts with the path component:

--------------------------------------------------------------------------------
var uri = new Uri('example.org/content/a.html#intro');
      
uri.isAbsolute; // false
uri.scheme;     // ''
uri.domain;     // ''
uri.path;       // 'example.org/content/a.html'
--------------------------------------------------------------------------------

Accessing the `origin` property of a relative URI throws an exception:

--------------------------------------------------------------------------------
var uri = new Uri('example.org/content/a.html#intro');
uri.isAbsolute; // false

try {
  var origin = uri.origin;
} catch(e) {
  print(e); // 'Illegal argument(s): Cannot use origin without a scheme'
}
--------------------------------------------------------------------------------
      

=== Building URIs

==== Problem

You want to build URIs from individual parts.

==== Solution

Use the `Uri.fromComponents()` constructor to build up a URI from individual
parts:

--------------------------------------------------------------------------------
var uri = new Uri.fromComponents(
  scheme: 'http',
  domain: 'example.org',
  path: '/content/a.html',
  query: 'name=john');

uri.isAbsolute;        // true
print(uri.toString()); // 'http://example.org/content/a.html?name=john'
--------------------------------------------------------------------------------

If you do not pass in the scheme as an argument, `Uri.fromComponents()` creates
a relative URI, and prefixes the URI with leading '//`:

--------------------------------------------------------------------------------
var uri = new Uri.fromComponents(domain: '/content/a.html');
         
uri.isAbsolute;       // false
print(uri.toString(); // '//content/a.html'
--------------------------------------------------------------------------------
 
You should remove the leading '//' before using the URI.



